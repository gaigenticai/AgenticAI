networks:
  agentic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Input layer volumes
  postgres_ingestion_data:
  redis_ingestion_cache:
  rabbitmq_data:
  ingestion_data:

  # Output layer volumes
  postgres_output_data:
  qdrant_storage:
  mongodb_output_data:
  minio_bronze_data:
  minio_silver_data:
  minio_gold_data:
  kafka_output_data:
  elasticsearch_data:
  timescaledb_data:
  neo4j_data:

  # Infrastructure volumes
  grafana_data:
  prometheus_data:
  backup_storage:
  audit_logs:

  # Caching volumes
  redis_cluster_data:

  # Agent Brain volumes
  agent_brain_data:
  agent_configs:
  agent_plugins:
  agent_workflows:
  agent_templates:
  agent_rules:
  agent_memory:
  agent_builder_static:
  agent_deployments:

  # UI Testing volumes
  ui_testing_screenshots:
  ui_testing_videos:
  ui_testing_reports:

  # Integration Tests volumes
  integration_test_reports:
  integration_test_logs:
  integration_test_artifacts:

  # Authentication Service volumes
  auth_service_logs:
  auth_service_data:

  # Audit Logging Service volumes
  audit_service_logs:
  audit_service_archives:

  # Monitoring Metrics Service volumes
  monitoring_service_logs:
  monitoring_service_data:

  # Grafana Dashboards Service volumes
  grafana_dashboards_logs:
  grafana_dashboards_data:
  grafana_dashboards_templates:

  # Error Handling Service volumes
  error_handling_logs:
  error_handling_data:

  # End-to-End Testing Service volumes
  e2e_testing_logs:
  e2e_testing_data:
  e2e_testing_screenshots:

  # Automated Testing Service volumes
  automated_testing_workspace:
  automated_testing_results:
  automated_testing_logs:

  # UI Quality Verification Service volumes
  ui_quality_screenshots:
  ui_quality_reports:
  ui_quality_temp:

  # Documentation Service volumes
  docs_content:
  docs_media:

  # Performance Optimization Service volumes
  performance_optimization_data:
  performance_optimization_logs:

  # Platform Validation Service volumes
  platform_validation_data:
  platform_validation_logs:

services:
  # === INPUT LAYER SERVICES ===

  # Message Queue Infrastructure
  rabbitmq:
    image: rabbitmq:3-management
    container_name: agentic-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: agentic_user
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-agentic123}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Ingestion Database
  postgresql_ingestion:
    image: postgres:15
    container_name: agentic-postgres-ingestion
    environment:
      POSTGRES_DB: agentic_ingestion
      POSTGRES_USER: agentic_user
      POSTGRES_PASSWORD: ${POSTGRES_INGESTION_PASSWORD:-agentic123}
    volumes:
      - postgres_ingestion_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_INGESTION_PORT:-5432}:5432"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic_user -d agentic_ingestion"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache for Ingestion
  redis_ingestion:
    image: redis:7-alpine
    container_name: agentic-redis-ingestion
    command: redis-server --appendonly yes
    volumes:
      - redis_ingestion_cache:/data
    ports:
      - "${REDIS_INGESTION_PORT:-6379}:6379"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Ingestion Coordinator Service
  ingestion-coordinator:
    build: ./services/ingestion-coordinator
    container_name: agentic-ingestion-coordinator
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
    environment:
      - DB_HOST=postgresql_ingestion
      - DB_PORT=5432
      - DB_NAME=agentic_ingestion
      - DB_USER=agentic_user
      - DB_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - QUEUE_HOST=rabbitmq
      - QUEUE_PORT=5672
      - CACHE_HOST=redis_ingestion
      - CACHE_PORT=6379
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${INGESTION_COORDINATOR_PORT:-8080}:8080"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # CSV Ingestion Service
  csv-ingestion-service:
    build: ./ingestion-services/csv-service
    container_name: agentic-csv-ingestion
    depends_on:
      ingestion-coordinator:
        condition: service_healthy
    environment:
      - SERVICE_TYPE=csv
      - COORDINATOR_HOST=ingestion-coordinator
      - COORDINATOR_PORT=8080
      - QUEUE_HOST=rabbitmq
      - DB_HOST=postgresql_ingestion
      - CACHE_HOST=redis_ingestion
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${CSV_INGESTION_PORT:-8080}:8080"
    networks:
      - agentic-network
    restart: unless-stopped

  # PDF Ingestion Service - IMPLEMENTED ✅
  pdf-ingestion-service:
    build: ./ingestion-services/pdf-service
    container_name: agentic-pdf-ingestion
    depends_on:
      ingestion-coordinator:
        condition: service_healthy
    environment:
      - SERVICE_TYPE=pdf
      - OCR_ENGINE=tesseract
      - COORDINATOR_HOST=ingestion-coordinator
      - COORDINATOR_PORT=8080
      - QUEUE_HOST=rabbitmq
      - DB_HOST=postgresql_ingestion
      - CACHE_HOST=redis_ingestion
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${PDF_INGESTION_PORT:-8083}:8080"
    networks:
      - agentic-network
    restart: unless-stopped

  # Excel Ingestion Service - IMPLEMENTED ✅
  excel-ingestion-service:
    build: ./ingestion-services/excel-service
    container_name: agentic-excel-ingestion
    depends_on:
      ingestion-coordinator:
        condition: service_healthy
    environment:
      - SERVICE_TYPE=excel
      - COORDINATOR_HOST=ingestion-coordinator
      - COORDINATOR_PORT=8080
      - QUEUE_HOST=rabbitmq
      - DB_HOST=postgresql_ingestion
      - CACHE_HOST=redis_ingestion
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${EXCEL_INGESTION_PORT:-8084}:8080"
    networks:
      - agentic-network
    restart: unless-stopped

  # JSON Ingestion Service - IMPLEMENTED ✅
  json-ingestion-service:
    build: ./ingestion-services/json-service
    container_name: agentic-json-ingestion
    depends_on:
      ingestion-coordinator:
        condition: service_healthy
    environment:
      - SERVICE_TYPE=json
      - COORDINATOR_HOST=ingestion-coordinator
      - COORDINATOR_PORT=8080
      - QUEUE_HOST=rabbitmq
      - DB_HOST=postgresql_ingestion
      - CACHE_HOST=redis_ingestion
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${JSON_INGESTION_PORT:-8085}:8080"
    networks:
      - agentic-network
    restart: unless-stopped

  # API Ingestion Service - Now Implemented ✅
  api-ingestion-service:
    build: ./ingestion-services/api-service
    container_name: agentic-api-ingestion
    depends_on:
      ingestion-coordinator:
        condition: service_healthy
    environment:
      - SERVICE_TYPE=api
      - COORDINATOR_HOST=ingestion-coordinator
      - COORDINATOR_PORT=8080
      - QUEUE_HOST=rabbitmq
      - DB_HOST=postgresql_ingestion
      - CACHE_HOST=redis_ingestion
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${API_INGESTION_PORT:-8086}:8080"
    networks:
      - agentic-network
    restart: unless-stopped

  # UI Scraper Service - IMPLEMENTED ✅
  ui-scraper-service:
    build: ./ingestion-services/ui-scraper-service
    container_name: agentic-ui-scraper
    depends_on:
      ingestion-coordinator:
        condition: service_healthy
    environment:
      - SERVICE_TYPE=ui-scraper
      - COORDINATOR_HOST=ingestion-coordinator
      - COORDINATOR_PORT=8080
      - QUEUE_HOST=rabbitmq
      - DB_HOST=postgresql_ingestion
      - CACHE_HOST=redis_ingestion
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${UI_SCRAPER_PORT:-8087}:8080"
    networks:
      - agentic-network
    restart: unless-stopped

  # === OUTPUT LAYER SERVICES ===

  # Output Database
  postgresql_output:
    image: postgres:15
    container_name: agentic-postgres-output
    environment:
      POSTGRES_DB: agentic_output
      POSTGRES_USER: agentic_user
      POSTGRES_PASSWORD: ${POSTGRES_OUTPUT_PASSWORD:-agentic123}
    volumes:
      - postgres_output_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_OUTPUT_PORT:-5433}:5432"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic_user -d agentic_output"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Vector Database - Qdrant
  qdrant_vector:
    image: qdrant/qdrant:latest
    container_name: agentic-qdrant
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Document Database - MongoDB
  mongodb_output:
    image: mongo:7
    container_name: agentic-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: agentic_user
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-agentic123}
      MONGO_INITDB_DATABASE: agentic_output
    volumes:
      - mongodb_output_data:/data/db
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Search Database - Elasticsearch
  elasticsearch_output:
    image: elasticsearch:8.11.0
    container_name: agentic-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TCP_PORT:-9300}:9300"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Time Series Database - TimescaleDB
  timescaledb_output:
    image: timescale/timescaledb:latest-pg15
    container_name: agentic-timescaledb
    environment:
      POSTGRES_DB: agentic_timeseries
      POSTGRES_USER: agentic_user
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD:-agentic123}
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - "${TIMESCALEDB_PORT:-5434}:5432"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic_user -d agentic_timeseries"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Graph Database - Neo4j
  neo4j_output:
    image: neo4j:5.15
    container_name: agentic-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-agentic123}
      NEO4J_PLUGINS: '["graph-data-science"]'
    volumes:
      - neo4j_data:/data
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-agentic123}", "MATCH () RETURN count(*) limit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Data Lake - MinIO Bronze Layer
  minio_bronze:
    image: minio/minio:latest
    container_name: agentic-minio-bronze
    command: server /data/bronze --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-agentic_user}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-agentic123}
    volumes:
      - minio_bronze_data:/data/bronze
    ports:
      - "${MINIO_BRONZE_API_PORT:-9000}:9000"
      - "${MINIO_BRONZE_CONSOLE_PORT:-9001}:9001"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Data Lake - MinIO Silver Layer
  minio_silver:
    image: minio/minio:latest
    container_name: agentic-minio-silver
    command: server /data/silver --console-address ":9002"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-agentic_user}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-agentic123}
    volumes:
      - minio_silver_data:/data/silver
    ports:
      - "${MINIO_SILVER_API_PORT:-9010}:9000"
      - "${MINIO_SILVER_CONSOLE_PORT:-9002}:9001"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9010/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Data Lake - MinIO Gold Layer
  minio_gold:
    image: minio/minio:latest
    container_name: agentic-minio-gold
    command: server /data/gold --console-address ":9003"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-agentic_user}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-agentic123}
    volumes:
      - minio_gold_data:/data/gold
    ports:
      - "${MINIO_GOLD_API_PORT:-9020}:9000"
      - "${MINIO_GOLD_CONSOLE_PORT:-9003}:9001"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9020/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Data Lake Service
  data-lake-minio:
    build: ./services/data-lake-minio
    container_name: agentic-data-lake
    depends_on:
      minio_bronze:
        condition: service_healthy
      minio_silver:
        condition: service_healthy
      minio_gold:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - MINIO_ENDPOINT_BRONZE=http://minio_bronze:9000
      - MINIO_ENDPOINT_SILVER=http://minio_silver:9010
      - MINIO_ENDPOINT_GOLD=http://minio_gold:9020
      - MINIO_ACCESS_KEY=${MINIO_USER:-agentic_user}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${DATA_LAKE_PORT:-8090}:8090"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Message Queue Service
  message-queue:
    build: ./services/message-queue
    container_name: agentic-message-queue
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
    ports:
      - "${MESSAGE_QUEUE_PORT:-8091}:8091"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Caching Service
  redis-caching:
    build: ./services/caching-redis
    container_name: agentic-redis-caching
    depends_on:
      redis_ingestion:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
    ports:
      - "${REDIS_CACHING_PORT:-8092}:8092"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # OAuth2/OIDC Authentication Service
  oauth2-oidc:
    build: ./services/oauth2-oidc
    container_name: agentic-oauth2-oidc
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - BASE_URL=http://localhost:8093
    ports:
      - "${OAUTH2_OIDC_PORT:-8093}:8093"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Data Encryption Service
  data-encryption:
    build: ./services/data-encryption
    container_name: agentic-data-encryption
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
    ports:
      - "${DATA_ENCRYPTION_PORT:-8094}:8094"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8094/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring Service
  monitoring:
    build: ./services/monitoring
    container_name: agentic-monitoring
    depends_on:
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_API_KEY=${GRAFANA_API_KEY:-admin:admin}
    ports:
      - "${MONITORING_PORT:-8095}:8095"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Audit Compliance Service
  audit-compliance:
    build: ./services/audit-compliance
    container_name: agentic-audit-compliance
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
    ports:
      - "${AUDIT_COMPLIANCE_PORT:-8096}:8096"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backup Orchestration Service
  backup-orchestration:
    build: ./services/backup-orchestration
    container_name: agentic-backup-orchestration
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - backup_storage:/backups
    ports:
      - "${BACKUP_ORCHESTRATION_PORT:-8097}:8097"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8097/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Port Manager Service
  # Distributed Tracing - Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: agentic-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-16688}:16688"
      - "${JAEGER_AGENT_PORT:-6831}:6831/udp"
    networks:
      - agentic-network
    restart: unless-stopped

  # Distributed Tracing Service
  tracing-jaeger:
    build: ./services/tracing-jaeger
    container_name: agentic-tracing-jaeger
    depends_on:
      jaeger:
        condition: service_started
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - JAEGER_ENDPOINT=http://jaeger:16686
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    ports:
      - "${TRACING_JAEGER_PORT:-8099}:8099"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # GraphQL API Service
  graphql-api:
    build: ./services/graphql-api
    container_name: agentic-graphql-api
    depends_on:
      data-lake-minio:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
    ports:
      - "${GRAPHQL_API_PORT:-8100}:8100"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Elasticsearch Service
  elasticsearch-service:
    build: ./services/elasticsearch
    container_name: agentic-elasticsearch-service
    depends_on:
      elasticsearch_output:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOST=elasticsearch_output
      - ELASTICSEARCH_PORT=9200
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    ports:
      - "${ELASTICSEARCH_SERVICE_PORT:-8110}:8100"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Grafana Service
  grafana-service:
    build: ./services/grafana
    container_name: agentic-grafana-service
    depends_on:
      grafana:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - GRAFANA_HOST=grafana
      - GRAFANA_PORT=3000
      - GRAFANA_USER=admin
      - GRAFANA_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    ports:
      - "${GRAFANA_SERVICE_PORT:-8120}:8120"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8120/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus Service
  prometheus-service:
    build: ./services/prometheus
    container_name: agentic-prometheus-service
    depends_on:
      prometheus:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - PROMETHEUS_HOST=prometheus
      - PROMETHEUS_PORT=9090
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    ports:
      - "${PROMETHEUS_SERVICE_PORT:-8130}:8130"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8130/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Output Coordinator Service
  output-coordinator:
    build: ./services/output-coordinator
    container_name: agentic-output-coordinator
    depends_on:
      postgresql_output:
        condition: service_healthy
      qdrant_vector:
        condition: service_healthy
      mongodb_output:
        condition: service_healthy
    environment:
      - OUTPUT_DB_HOST=postgresql_output
      - OUTPUT_DB_PORT=5432
      - VECTOR_DB_HOST=qdrant_vector
      - VECTOR_DB_PORT=6333
      - DOCUMENT_DB_HOST=mongodb_output
      - DOCUMENT_DB_PORT=27017
      - SEARCH_DB_HOST=elasticsearch_output
      - SEARCH_DB_PORT=9200
      - TIMESERIES_DB_HOST=timescaledb_output
      - GRAPH_DB_HOST=neo4j_output
      - MINIO_ENDPOINT=http://minio_bronze:9000
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    ports:
      - "${OUTPUT_COORDINATOR_PORT:-8081}:8081"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # === AGENTIC BRAIN PLATFORM ===

  # Agent Orchestrator - Core agent management and task routing
  agent-orchestrator:
    build: ./services/agent-orchestrator
    container_name: agentic-agent-orchestrator
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
      brain-factory:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
      - BRAIN_FACTORY_HOST=brain-factory
      - BRAIN_FACTORY_PORT=8301
      - DEPLOYMENT_PIPELINE_HOST=deployment-pipeline
      - DEPLOYMENT_PIPELINE_PORT=8303
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - AGENT_ORCHESTRATOR_PORT=${AGENT_ORCHESTRATOR_PORT:-8200}
    volumes:
      - agent_brain_data:/app/data
      - agent_configs:/app/configs
    ports:
      - "${AGENT_ORCHESTRATOR_PORT:-8200}:8200"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Plugin Registry - Domain and generic plugin management
  plugin-registry:
    build: ./services/plugin-registry
    container_name: agentic-plugin-registry
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - PLUGIN_REGISTRY_PORT=${PLUGIN_REGISTRY_PORT:-8201}
    volumes:
      - agent_plugins:/app/plugins
      - agent_brain_data:/app/data
    ports:
      - "${PLUGIN_REGISTRY_PORT:-8201}:8201"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8201/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Workflow Engine - Agent workflow processing and orchestration
  workflow-engine:
    build: ./services/workflow-engine
    container_name: agentic-workflow-engine
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      plugin-registry:
        condition: service_healthy
      rule-engine:
        condition: service_healthy
      memory-manager:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
      - PLUGIN_REGISTRY_HOST=plugin-registry
      - PLUGIN_REGISTRY_PORT=8201
      - RULE_ENGINE_HOST=rule-engine
      - RULE_ENGINE_PORT=8204
      - MEMORY_MANAGER_HOST=memory-manager
      - MEMORY_MANAGER_PORT=8205
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - WORKFLOW_ENGINE_PORT=${WORKFLOW_ENGINE_PORT:-8202}
    volumes:
      - agent_workflows:/app/workflows
      - agent_brain_data:/app/data
    ports:
      - "${WORKFLOW_ENGINE_PORT:-8202}:8202"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8202/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Template Store - Prebuilt agent templates management
  template-store:
    build: ./services/template-store
    container_name: agentic-template-store
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - TEMPLATE_STORE_PORT=${TEMPLATE_STORE_PORT:-8203}
    volumes:
      - agent_templates:/app/templates
      - agent_brain_data:/app/data
    ports:
      - "${TEMPLATE_STORE_PORT:-8203}:8203"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8203/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Rule Engine - Business rule processing and decision logic
  rule-engine:
    build: ./services/rule-engine
    container_name: agentic-rule-engine
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - RULE_ENGINE_PORT=${RULE_ENGINE_PORT:-8204}
    volumes:
      - agent_rules:/app/rules
      - agent_brain_data:/app/data
    ports:
      - "${RULE_ENGINE_PORT:-8204}:8204"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8204/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Memory Manager - Agent memory management (working, episodic, long-term)
  memory-manager:
    build: ./services/memory-manager
    container_name: agentic-memory-manager
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
      qdrant_vector:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
      - VECTOR_DB_HOST=qdrant_vector
      - VECTOR_DB_PORT=6333
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - MEMORY_MANAGER_PORT=${MEMORY_MANAGER_PORT:-8205}
    volumes:
      - agent_memory:/app/memory
      - agent_brain_data:/app/data
    ports:
      - "${MEMORY_MANAGER_PORT:-8205}:8205"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8205/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Agent Builder UI - No-code visual agent creation interface
  agent-builder-ui:
    build: ./services/agent-builder-ui
    container_name: agentic-agent-builder-ui
    depends_on:
      template-store:
        condition: service_healthy
      brain-factory:
        condition: service_healthy
      ui-to-brain-mapper:
        condition: service_healthy
    environment:
      - TEMPLATE_STORE_HOST=template-store
      - TEMPLATE_STORE_PORT=8203
      - BRAIN_FACTORY_HOST=brain-factory
      - BRAIN_FACTORY_PORT=8301
      - UI_TO_BRAIN_MAPPER_HOST=ui-to-brain-mapper
      - UI_TO_BRAIN_MAPPER_PORT=8302
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - AGENT_BUILDER_UI_PORT=${AGENT_BUILDER_UI_PORT:-8300}
    volumes:
      - agent_builder_static:/app/static
      - agent_brain_data:/app/data
    ports:
      - "${AGENT_BUILDER_UI_PORT:-8300}:8300"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8300/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # UI-to-Brain Mapper - Converts visual workflows to agent configurations
  ui-to-brain-mapper:
    build: ./services/ui-to-brain-mapper
    container_name: agentic-ui-to-brain-mapper
    depends_on:
      plugin-registry:
        condition: service_healthy
      workflow-engine:
        condition: service_healthy
      rule-engine:
        condition: service_healthy
      memory-manager:
        condition: service_healthy
      template-store:
        condition: service_healthy
    environment:
      - PLUGIN_REGISTRY_HOST=plugin-registry
      - PLUGIN_REGISTRY_PORT=8201
      - WORKFLOW_ENGINE_HOST=workflow-engine
      - WORKFLOW_ENGINE_PORT=8202
      - RULE_ENGINE_HOST=rule-engine
      - RULE_ENGINE_PORT=8204
      - MEMORY_MANAGER_HOST=memory-manager
      - MEMORY_MANAGER_PORT=8205
      - TEMPLATE_STORE_HOST=template-store
      - TEMPLATE_STORE_PORT=8203
      - BRAIN_FACTORY_HOST=brain-factory
      - BRAIN_FACTORY_PORT=8301
      - AGENT_ORCHESTRATOR_HOST=agent-orchestrator
      - AGENT_ORCHESTRATOR_PORT=8200
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - UI_TO_BRAIN_MAPPER_PORT=${UI_TO_BRAIN_MAPPER_PORT:-8302}
      # LLM Configuration
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL:-gpt-4}
      - DEFAULT_LLM_TEMPERATURE=${DEFAULT_LLM_TEMPERATURE:-0.7}
      - DEFAULT_MEMORY_TTL=${DEFAULT_MEMORY_TTL:-3600}
      - DEFAULT_MEMORY_DIMENSIONS=${DEFAULT_MEMORY_DIMENSIONS:-384}
    volumes:
      - agent_brain_data:/app/data
      - agent_configs:/app/configs
      - agent_workflows:/app/workflows
    ports:
      - "${UI_TO_BRAIN_MAPPER_PORT:-8302}:8302"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8302/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Reasoning Module Factory - AI reasoning pattern implementations
  reasoning-module-factory:
    build: ./services/reasoning-module-factory
    container_name: agentic-reasoning-module-factory
    depends_on:
      llm-processor:
        condition: service_healthy
      memory-manager:
        condition: service_healthy
      plugin-registry:
        condition: service_healthy
      rule-engine:
        condition: service_healthy
    environment:
      - LLM_PROCESSOR_PORT=8005
      - MEMORY_MANAGER_PORT=8205
      - PLUGIN_REGISTRY_PORT=8201
      - RULE_ENGINE_PORT=8204
      - SERVICE_HOST=localhost
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - REASONING_MODULE_FACTORY_PORT=${REASONING_MODULE_FACTORY_PORT:-8304}
      # LLM Configuration
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL:-gpt-4}
      - DEFAULT_LLM_TEMPERATURE=${DEFAULT_LLM_TEMPERATURE:-0.7}
      - MAX_TOKENS=${MAX_TOKENS:-4096}
      # Pattern-specific Configuration
      - REACT_MAX_STEPS=${REACT_MAX_STEPS:-10}
      - REFLECTION_MAX_ITERATIONS=${REFLECTION_MAX_ITERATIONS:-5}
      - PLANNING_MAX_DEPTH=${PLANNING_MAX_DEPTH:-5}
      - MULTI_AGENT_MAX_AGENTS=${MULTI_AGENT_MAX_AGENTS:-5}
    volumes:
      - agent_brain_data:/app/data
      - agent_configs:/app/configs
    ports:
      - "${REASONING_MODULE_FACTORY_PORT:-8304}:8304"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8304/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Agent Brain Base Class - Core agent execution framework
  agent-brain-base:
    build: ./services/agent-brain-base
    container_name: agentic-agent-brain-base
    depends_on:
      reasoning-module-factory:
        condition: service_healthy
      memory-manager:
        condition: service_healthy
      plugin-registry:
        condition: service_healthy
      rule-engine:
        condition: service_healthy
    environment:
      - REASONING_MODULE_FACTORY_PORT=8304
      - MEMORY_MANAGER_PORT=8205
      - PLUGIN_REGISTRY_PORT=8201
      - RULE_ENGINE_PORT=8204
      - SERVICE_HOST=localhost
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - AGENT_BRAIN_BASE_PORT=${AGENT_BRAIN_BASE_PORT:-8305}
      # Execution Configuration
      - DEFAULT_EXECUTION_TIMEOUT=${DEFAULT_EXECUTION_TIMEOUT:-300}
      - MAX_CONCURRENT_TASKS=${MAX_CONCURRENT_TASKS:-10}
      - MEMORY_TTL_SECONDS=${MEMORY_TTL_SECONDS:-3600}
      # Performance Monitoring
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_RETENTION_HOURS=${METRICS_RETENTION_HOURS:-24}
    volumes:
      - agent_brain_data:/app/data
      - agent_configs:/app/configs
      - agent_workflows:/app/workflows
    ports:
      - "${AGENT_BRAIN_BASE_PORT:-8305}:8305"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8305/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Service Connector Factory - Data service connection management
  service-connector-factory:
    build: ./services/service-connector-factory
    container_name: agentic-service-connector-factory
    depends_on:
      csv-ingestion-service:
        condition: service_healthy
      api-ingestion-service:
        condition: service_healthy
      pdf-ingestion-service:
        condition: service_healthy
      postgresql-output:
        condition: service_healthy
      qdrant-vector:
        condition: service_healthy
      elasticsearch-output:
        condition: service_healthy
    environment:
      - CSV_INGESTION_PORT=8001
      - API_INGESTION_PORT=8002
      - PDF_INGESTION_PORT=8003
      - POSTGRES_OUTPUT_PORT=8004
      - QDRANT_VECTOR_PORT=6333
      - ELASTICSEARCH_PORT=9200
      - MINIO_PORT=9000
      - RABBITMQ_PORT=5672
      - SERVICE_HOST=localhost
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - SERVICE_CONNECTOR_FACTORY_PORT=${SERVICE_CONNECTOR_FACTORY_PORT:-8306}
      # Connection Pool Settings
      - MAX_CONNECTIONS_PER_SERVICE=${MAX_CONNECTIONS_PER_SERVICE:-10}
      - CONNECTION_TIMEOUT=${CONNECTION_TIMEOUT:-30}
      - CONNECTION_RETRY_ATTEMPTS=${CONNECTION_RETRY_ATTEMPTS:-3}
      - CONNECTION_RETRY_DELAY=${CONNECTION_RETRY_DELAY:-1.0}
      # Health Monitoring
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30}
      - SERVICE_TIMEOUT_THRESHOLD=${SERVICE_TIMEOUT_THRESHOLD:-60}
    volumes:
      - agent_brain_data:/app/data
      - agent_configs:/app/configs
    ports:
      - "${SERVICE_CONNECTOR_FACTORY_PORT:-8306}:8306"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8306/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Deployment Pipeline Service - Deployment orchestration and monitoring
  deployment-pipeline:
    build: ./services/deployment-pipeline
    container_name: agentic-deployment-pipeline
    depends_on:
      brain-factory:
        condition: service_healthy
      agent-orchestrator:
        condition: service_healthy
      agent-brain-base:
        condition: service_healthy
      service-connector-factory:
        condition: service_healthy
      memory-manager:
        condition: service_healthy
      plugin-registry:
        condition: service_healthy
    environment:
      - BRAIN_FACTORY_PORT=8301
      - AGENT_ORCHESTRATOR_PORT=8200
      - AGENT_BRAIN_BASE_PORT=8305
      - SERVICE_CONNECTOR_FACTORY_PORT=8306
      - MEMORY_MANAGER_PORT=8205
      - PLUGIN_REGISTRY_PORT=8201
      - SERVICE_HOST=localhost
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - DEPLOYMENT_PIPELINE_PORT=${DEPLOYMENT_PIPELINE_PORT:-8303}
      # Deployment Settings
      - MAX_CONCURRENT_DEPLOYMENTS=${MAX_CONCURRENT_DEPLOYMENTS:-3}
      - DEPLOYMENT_TIMEOUT=${DEPLOYMENT_TIMEOUT:-600}
      - ROLLBACK_TIMEOUT=${ROLLBACK_TIMEOUT:-300}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30}
      # Testing Configuration
      - TEST_EXECUTION_TIMEOUT=${TEST_EXECUTION_TIMEOUT:-120}
      - PERFORMANCE_TEST_DURATION=${PERFORMANCE_TEST_DURATION:-60}
      - LOAD_TEST_CONCURRENT_USERS=${LOAD_TEST_CONCURRENT_USERS:-10}
      # Performance Monitoring
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_RETENTION_HOURS=${METRICS_RETENTION_HOURS:-24}
    volumes:
      - agent_brain_data:/app/data
      - agent_configs:/app/configs
      - agent_deployments:/app/deployments
    ports:
      - "${DEPLOYMENT_PIPELINE_PORT:-8303}:8303"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8303/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Brain Factory - Agent instantiation from configurations
  brain-factory:
    build: ./services/brain-factory
    container_name: agentic-brain-factory
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      plugin-registry:
        condition: service_healthy
      workflow-engine:
        condition: service_healthy
      memory-manager:
        condition: service_healthy
      ui-to-brain-mapper:
        condition: service_healthy
      reasoning-module-factory:
        condition: service_healthy
      agent-brain-base:
        condition: service_healthy
      service-connector-factory:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - PLUGIN_REGISTRY_HOST=plugin-registry
      - PLUGIN_REGISTRY_PORT=8201
      - WORKFLOW_ENGINE_HOST=workflow-engine
      - WORKFLOW_ENGINE_PORT=8202
      - MEMORY_MANAGER_HOST=memory-manager
      - MEMORY_MANAGER_PORT=8205
      - AGENT_ORCHESTRATOR_HOST=agent-orchestrator
      - AGENT_ORCHESTRATOR_PORT=8200
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - BRAIN_FACTORY_PORT=${BRAIN_FACTORY_PORT:-8301}
      # LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL:-gpt-4}
      - DEFAULT_LLM_TEMPERATURE=${DEFAULT_LLM_TEMPERATURE:-0.7}
    volumes:
      - agent_brain_data:/app/data
      - agent_configs:/app/configs
    ports:
      - "${BRAIN_FACTORY_PORT:-8301}:8301"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8301/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Deployment Pipeline - Agent validation, testing, and deployment
  deployment-pipeline:
    build: ./services/deployment-pipeline
    container_name: agentic-deployment-pipeline
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      brain-factory:
        condition: service_healthy
      agent-orchestrator:
        condition: service_healthy
      workflow-engine:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - BRAIN_FACTORY_HOST=brain-factory
      - BRAIN_FACTORY_PORT=8301
      - AGENT_ORCHESTRATOR_HOST=agent-orchestrator
      - AGENT_ORCHESTRATOR_PORT=8200
      - WORKFLOW_ENGINE_HOST=workflow-engine
      - WORKFLOW_ENGINE_PORT=8202
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - DEPLOYMENT_PIPELINE_PORT=${DEPLOYMENT_PIPELINE_PORT:-8303}
    volumes:
      - agent_deployments:/app/deployments
      - agent_brain_data:/app/data
    ports:
      - "${DEPLOYMENT_PIPELINE_PORT:-8303}:8303"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8303/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # === MONITORING & OBSERVABILITY ===

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - agentic-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - agentic-network
    restart: unless-stopped

  # Log Aggregation - FluentD
  fluentd:
    image: fluent/fluentd:latest
    container_name: agentic-fluentd
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf
      - audit_logs:/fluentd/log
    ports:
      - "${FLUENTD_PORT:-24224}:24224"
    networks:
      - agentic-network
    restart: unless-stopped

  # === SECURITY & AUTHENTICATION ===

  # OAuth2 Proxy
  oauth2_proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: agentic-oauth2-proxy
    environment:
      - OAUTH2_PROXY_PROVIDER=oidc
      - OAUTH2_PROXY_CLIENT_ID=${OAUTH_CLIENT_ID:-dummy}
      - OAUTH2_PROXY_CLIENT_SECRET=${OAUTH_CLIENT_SECRET:-dummy}
      - OAUTH2_PROXY_OIDC_ISSUER_URL=${OIDC_ISSUER_URL:-http://dummy}
      - OAUTH2_PROXY_HTTP_ADDRESS=0.0.0.0:4180
      - OAUTH2_PROXY_UPSTREAMS=http://ingestion-coordinator:8080,http://output-coordinator:8081
    ports:
      - "${OAUTH2_PROXY_PORT:-4180}:4180"
    networks:
      - agentic-network
    profiles:
      - auth
    restart: unless-stopped

  # === STREAMING & MESSAGING ===

  # Kafka for Streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: agentic-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_output_data:/var/lib/kafka/data
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    networks:
      - agentic-network
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: agentic-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - agentic-network
    restart: unless-stopped

  # === BACKUP & DISASTER RECOVERY ===

  # === DEVELOPMENT & TESTING ===

  # Port Conflict Resolver - REMOVED: Duplicate service, using port-manager instead

  # Vector UI Service - Professional Web Interface
  vector-ui:
    build: ./services/vector-ui
    container_name: agentic-vector-ui
    depends_on:
      output-coordinator:
        condition: service_healthy
    environment:
      - VECTOR_UI_PORT=${VECTOR_UI_PORT:-8082}
      - OUTPUT_COORDINATOR_URL=http://output-coordinator:8081
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    ports:
      - "${VECTOR_UI_PORT:-8082}:8082"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Port Manager Service - Automatic Port Conflict Resolution
  port-manager:
    build: ./services/port-manager
    container_name: agentic-port-manager
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PYTHONPATH=/app
    networks:
      - agentic-network
    profiles:
      - dev
    restart: "no"

  # UI Testing Service - Comprehensive automated UI testing
  ui-testing-service:
    build: ./services/ui-testing-service
    container_name: agentic-ui-testing-service
    depends_on:
      agent-builder-ui:
        condition: service_healthy
      agent-orchestrator:
        condition: service_healthy
      brain-factory:
        condition: service_healthy
    environment:
      - UI_TESTING_PORT=${UI_TESTING_PORT:-8310}
      - AGENT_BUILDER_UI_HOST=agent-builder-ui
      - AGENT_BUILDER_UI_PORT=${AGENT_BUILDER_UI_PORT:-8300}
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DEFAULT_BROWSER=${DEFAULT_BROWSER:-chrome}
      - HEADLESS_MODE=${HEADLESS_MODE:-true}
      - TEST_TIMEOUT=${TEST_TIMEOUT:-30}
      - SCREENSHOT_ON_FAILURE=${SCREENSHOT_ON_FAILURE:-true}
      - PAGE_LOAD_THRESHOLD_MS=${PAGE_LOAD_THRESHOLD_MS:-3000}
      - INTERACTION_RESPONSE_THRESHOLD_MS=${INTERACTION_RESPONSE_THRESHOLD_MS:-1000}
      - MEMORY_USAGE_THRESHOLD_MB=${MEMORY_USAGE_THRESHOLD_MB:-500}
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-8001}
    volumes:
      - ui_testing_screenshots:/app/screenshots
      - ui_testing_videos:/app/test_videos
      - ui_testing_reports:/app/test_reports
    ports:
      - "${UI_TESTING_PORT:-8310}:8310"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8310/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    profiles:
      - testing

  # Integration Tests Service - Comprehensive end-to-end testing
  integration-tests:
    build: ./services/integration-tests
    container_name: agentic-integration-tests
    depends_on:
      agent-orchestrator:
        condition: service_healthy
      brain-factory:
        condition: service_healthy
      template-store:
        condition: service_healthy
      deployment-pipeline:
        condition: service_healthy
      ui-testing-service:
        condition: service_healthy
    environment:
      - INTEGRATION_TESTS_PORT=${INTEGRATION_TESTS_PORT:-8320}
      - AGENT_ORCHESTRATOR_URL=http://agent-orchestrator:8200
      - PLUGIN_REGISTRY_URL=http://plugin-registry:8201
      - WORKFLOW_ENGINE_URL=http://workflow-engine:8202
      - TEMPLATE_STORE_URL=http://template-store:8203
      - RULE_ENGINE_URL=http://rule-engine:8204
      - MEMORY_MANAGER_URL=http://memory-manager:8205
      - AGENT_BUILDER_UI_URL=http://agent-builder-ui:8300
      - BRAIN_FACTORY_URL=http://brain-factory:8301
      - UI_TO_BRAIN_MAPPER_URL=http://ui-to-brain-mapper:8302
      - DEPLOYMENT_PIPELINE_URL=http://deployment-pipeline:8303
      - REASONING_MODULE_FACTORY_URL=http://reasoning-module-factory:8304
      - AGENT_BRAIN_BASE_URL=http://agent-brain-base:8305
      - SERVICE_CONNECTOR_FACTORY_URL=http://service-connector-factory:8306
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DEFAULT_TEST_TIMEOUT=${DEFAULT_TEST_TIMEOUT:-300}
      - MAX_CONCURRENT_TESTS=${MAX_CONCURRENT_TESTS:-5}
      - RETRY_FAILED_TESTS=${RETRY_FAILED_TESTS:-true}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - MAX_RESPONSE_TIME_MS=${MAX_RESPONSE_TIME_MS:-5000}
      - MIN_SUCCESS_RATE=${MIN_SUCCESS_RATE:-0.95}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-8002}
    volumes:
      - integration_test_reports:/app/test_reports
      - integration_test_logs:/app/test_logs
      - integration_test_artifacts:/app/test_artifacts
    ports:
      - "${INTEGRATION_TESTS_PORT:-8320}:8320"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8320/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    profiles:
      - testing

  # Authentication Service - Comprehensive user authentication and authorization
  authentication-service:
    build: ./services/authentication-service
    container_name: agentic-authentication-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT:-8330}
      - AUTH_SERVICE_HOST=0.0.0.0
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - PASSWORD_MIN_LENGTH=${PASSWORD_MIN_LENGTH:-8}
      - PASSWORD_REQUIRE_UPPERCASE=${PASSWORD_REQUIRE_UPPERCASE:-true}
      - PASSWORD_REQUIRE_LOWERCASE=${PASSWORD_REQUIRE_LOWERCASE:-true}
      - PASSWORD_REQUIRE_DIGITS=${PASSWORD_REQUIRE_DIGITS:-true}
      - PASSWORD_REQUIRE_SPECIAL=${PASSWORD_REQUIRE_SPECIAL:-false}
      - SESSION_TIMEOUT_MINUTES=${SESSION_TIMEOUT_MINUTES:-60}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-5}
      - ACCOUNT_LOCK_DURATION_MINUTES=${ACCOUNT_LOCK_DURATION_MINUTES:-30}
      - MFA_ISSUER_NAME=${MFA_ISSUER_NAME:-Agentic Brain}
      - OAUTH2_ENABLED=${OAUTH2_ENABLED:-false}
      - OAUTH2_GOOGLE_CLIENT_ID=${OAUTH2_GOOGLE_CLIENT_ID:-}
      - OAUTH2_GOOGLE_CLIENT_SECRET=${OAUTH2_GOOGLE_CLIENT_SECRET:-}
      - OAUTH2_GITHUB_CLIENT_ID=${OAUTH2_GITHUB_CLIENT_ID:-}
      - OAUTH2_GITHUB_CLIENT_SECRET=${OAUTH2_GITHUB_CLIENT_SECRET:-}
      - SMTP_SERVER=${SMTP_SERVER:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - EMAIL_FROM=${EMAIL_FROM:-noreply@agenticbrain.com}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your-32-byte-encryption-key}
      - SECURITY_HEADERS_ENABLED=${SECURITY_HEADERS_ENABLED:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:8300,http://localhost:3000}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-8003}
    volumes:
      - auth_service_logs:/app/logs
      - auth_service_data:/app/data
    ports:
      - "${AUTH_SERVICE_PORT:-8330}:8330"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8330/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Audit Logging Service - Comprehensive audit logging and compliance monitoring
  audit-logging-service:
    build: ./services/audit-logging-service
    container_name: agentic-audit-logging-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AUDIT_SERVICE_PORT=${AUDIT_SERVICE_PORT:-8340}
      - AUDIT_SERVICE_HOST=0.0.0.0
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - ELASTICSEARCH_ENABLED=${ELASTICSEARCH_ENABLED:-false}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST:-elasticsearch}
      - ELASTICSEARCH_PORT=${ELASTICSEARCH_PORT:-9200}
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX:-audit_events}
      - MAX_EVENTS_PER_REQUEST=${MAX_EVENTS_PER_REQUEST:-100}
      - AUDIT_QUEUE_SIZE=${AUDIT_QUEUE_SIZE:-10000}
      - BATCH_SIZE=${BATCH_SIZE:-50}
      - DEFAULT_RETENTION_DAYS=${DEFAULT_RETENTION_DAYS:-365}
      - ARCHIVE_AFTER_DAYS=${ARCHIVE_AFTER_DAYS:-90}
      - DELETE_AFTER_DAYS=${DELETE_AFTER_DAYS:-2555}
      - GDPR_ENABLED=${GDPR_ENABLED:-true}
      - SOX_ENABLED=${SOX_ENABLED:-true}
      - HIPAA_ENABLED=${HIPAA_ENABLED:-false}
      - PCI_ENABLED=${PCI_ENABLED:-false}
      - ALERT_ENABLED=${ALERT_ENABLED:-true}
      - ALERT_EMAIL_ENABLED=${ALERT_EMAIL_ENABLED:-false}
      - ALERT_WEBHOOK_ENABLED=${ALERT_WEBHOOK_ENABLED:-false}
      - SMTP_SERVER=${SMTP_SERVER:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - EMAIL_FROM=${EMAIL_FROM:-audit@agenticbrain.com}
      - API_KEY_REQUIRED=${API_KEY_REQUIRED:-true}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - MAX_REQUESTS_PER_MINUTE=${MAX_REQUESTS_PER_MINUTE:-1000}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-8004}
    volumes:
      - audit_service_logs:/app/logs
      - audit_service_archives:/app/archives
    ports:
      - "${AUDIT_SERVICE_PORT:-8340}:8340"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8340/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Monitoring Metrics Service - Comprehensive monitoring and metrics collection
  monitoring-metrics-service:
    build: ./services/monitoring-metrics-service
    container_name: agentic-monitoring-metrics-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - METRICS_SERVICE_PORT=${METRICS_SERVICE_PORT:-8350}
      - METRICS_SERVICE_HOST=0.0.0.0
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - AGENT_ORCHESTRATOR_URL=http://agent-orchestrator:8200
      - PLUGIN_REGISTRY_URL=http://plugin-registry:8201
      - WORKFLOW_ENGINE_URL=http://workflow-engine:8202
      - TEMPLATE_STORE_URL=http://template-store:8203
      - RULE_ENGINE_URL=http://rule-engine:8204
      - MEMORY_MANAGER_URL=http://memory-manager:8205
      - AGENT_BUILDER_UI_URL=http://agent-builder-ui:8300
      - BRAIN_FACTORY_URL=http://brain-factory:8301
      - UI_TO_BRAIN_MAPPER_URL=http://ui-to-brain-mapper:8302
      - DEPLOYMENT_PIPELINE_URL=http://deployment-pipeline:8303
      - REASONING_MODULE_FACTORY_URL=http://reasoning-module-factory:8304
      - AGENT_BRAIN_BASE_URL=http://agent-brain-base:8305
      - SERVICE_CONNECTOR_FACTORY_URL=http://service-connector-factory:8306
      - AUTHENTICATION_SERVICE_URL=http://authentication-service:8330
      - AUDIT_LOGGING_URL=http://audit-logging-service:8340
      - INTEGRATION_TESTS_URL=http://integration-tests:8320
      - COLLECTION_INTERVAL_SECONDS=${COLLECTION_INTERVAL_SECONDS:-30}
      - METRICS_RETENTION_DAYS=${METRICS_RETENTION_DAYS:-90}
      - ENABLE_HISTORICAL_STORAGE=${ENABLE_HISTORICAL_STORAGE:-true}
      - ALERT_ENABLED=${ALERT_ENABLED:-true}
      - ALERT_EMAIL_ENABLED=${ALERT_EMAIL_ENABLED:-false}
      - ALERT_WEBHOOK_ENABLED=${ALERT_WEBHOOK_ENABLED:-false}
      - SMTP_SERVER=${SMTP_SERVER:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - EMAIL_FROM=${EMAIL_FROM:-audit@agenticbrain.com}
      - ENABLE_PERFORMANCE_BASELINES=${ENABLE_PERFORMANCE_BASELINES:-true}
      - BASELINE_CALCULATION_DAYS=${BASELINE_CALCULATION_DAYS:-30}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-8005}
    volumes:
      - monitoring_service_logs:/app/logs
      - monitoring_service_data:/app/data
    ports:
      - "${METRICS_SERVICE_PORT:-8350}:8350"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8350/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Grafana Dashboards Service - Visual monitoring and analytics dashboards
  grafana-dashboards-service:
    build: ./services/grafana-dashboards-service
    container_name: agentic-grafana-dashboards-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - GRAFANA_DASHBOARDS_PORT=${GRAFANA_DASHBOARDS_PORT:-8360}
      - GRAFANA_DASHBOARDS_HOST=0.0.0.0
      - GRAFANA_URL=${GRAFANA_URL:-http://grafana:3000}
      - GRAFANA_API_KEY=${GRAFANA_API_KEY:-}
      - GRAFANA_USERNAME=${GRAFANA_USERNAME:-admin}
      - GRAFANA_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - PROMETHEUS_URL=${PROMETHEUS_URL:-http://prometheus:9090}
      - METRICS_SERVICE_URL=http://monitoring-metrics-service:8350
      - AGENT_ORCHESTRATOR_URL=http://agent-orchestrator:8200
      - PLUGIN_REGISTRY_URL=http://plugin-registry:8201
      - WORKFLOW_ENGINE_URL=http://workflow-engine:8202
      - TEMPLATE_STORE_URL=http://template-store:8203
      - RULE_ENGINE_URL=http://rule-engine:8204
      - MEMORY_MANAGER_URL=http://memory-manager:8205
      - BRAIN_FACTORY_URL=http://brain-factory:8301
      - DEPLOYMENT_PIPELINE_URL=http://deployment-pipeline:8303}
      - AUTHENTICATION_SERVICE_URL=http://authentication-service:8330
      - AUDIT_LOGGING_URL=http://audit-logging-service:8340
      - INTEGRATION_TESTS_URL=http://integration-tests:8320
      - DASHBOARD_REFRESH_INTERVAL=${DASHBOARD_REFRESH_INTERVAL:-30}
      - ENABLE_AUTO_PROVISIONING=${ENABLE_AUTO_PROVISIONING:-true}
      - DASHBOARD_RETENTION_DAYS=${DASHBOARD_RETENTION_DAYS:-90}
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - grafana_dashboards_logs:/app/logs
      - grafana_dashboards_data:/app/data
      - grafana_dashboards_templates:/app/templates
    ports:
      - "${GRAFANA_DASHBOARDS_PORT:-8360}:8360"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8360/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Error Handling Service - Comprehensive error management and recovery
  error-handling-service:
    build: ./services/error-handling-service
    container_name: agentic-error-handling-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ERROR_HANDLING_PORT=${ERROR_HANDLING_PORT:-8370}
      - ERROR_HANDLING_HOST=0.0.0.0
      - ENABLE_AUTO_RECOVERY=${ENABLE_AUTO_RECOVERY:-true}
      - ERROR_RETENTION_DAYS=${ERROR_RETENTION_DAYS:-90}
      - MAX_RECOVERY_ATTEMPTS=${MAX_RECOVERY_ATTEMPTS:-3}
      - RECOVERY_TIMEOUT_SECONDS=${RECOVERY_TIMEOUT_SECONDS:-300}
      - ENABLE_ERROR_ALERTS=${ENABLE_ERROR_ALERTS:-true}
      - CRITICAL_ERROR_THRESHOLD=${CRITICAL_ERROR_THRESHOLD:-10}
      - ERROR_RATE_ALERT_THRESHOLD=${ERROR_RATE_ALERT_THRESHOLD:-0.1}
      - MONITORING_SERVICE_URL=http://monitoring-metrics-service:8350
      - AUDIT_LOGGING_URL=http://audit-logging-service:8340
      - PROMETHEUS_URL=${PROMETHEUS_URL:-http://prometheus:9090}
      - AGENT_ORCHESTRATOR_URL=http://agent-orchestrator:8200
      - PLUGIN_REGISTRY_URL=http://plugin-registry:8201
      - WORKFLOW_ENGINE_URL=http://workflow-engine:8202
      - TEMPLATE_STORE_URL=http://template-store:8203
      - RULE_ENGINE_URL=http://rule-engine:8204
      - MEMORY_MANAGER_URL=http://memory-manager:8205
      - AGENT_BUILDER_UI_URL=http://agent-builder-ui:8300
      - BRAIN_FACTORY_URL=http://brain-factory:8301
      - UI_TO_BRAIN_MAPPER_URL=http://ui-to-brain-mapper:8302
      - DEPLOYMENT_PIPELINE_URL=http://deployment-pipeline:8303
      - REASONING_MODULE_FACTORY_URL=http://reasoning-module-factory:8304
      - AGENT_BRAIN_BASE_URL=http://agent-brain-base:8305
      - SERVICE_CONNECTOR_FACTORY_URL=http://service-connector-factory:8306
      - AUTHENTICATION_SERVICE_URL=http://authentication-service:8330
      - INTEGRATION_TESTS_URL=http://integration-tests:8320
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - error_handling_logs:/app/logs
      - error_handling_data:/app/data
    ports:
      - "${ERROR_HANDLING_PORT:-8370}:8370"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8370/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # End-to-End Testing Service - Comprehensive E2E testing and validation
  end-to-end-testing-service:
    build: ./services/end-to-end-testing-service
    container_name: agentic-e2e-testing-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - E2E_TESTING_PORT=${E2E_TESTING_PORT:-8380}
      - E2E_TESTING_HOST=0.0.0.0
      - MAX_CONCURRENT_TESTS=${MAX_CONCURRENT_TESTS:-5}
      - TEST_TIMEOUT_SECONDS=${TEST_TIMEOUT_SECONDS:-300}
      - CLEANUP_AFTER_TEST=${CLEANUP_AFTER_TEST:-true}
      - SELENIUM_HUB_URL=${SELENIUM_HUB_URL:-http://localhost:4444/wd/hub}
      - UI_TEST_TIMEOUT=${UI_TEST_TIMEOUT:-60}
      - BROWSER_HEADLESS=${BROWSER_HEADLESS:-true}
      - LOAD_TEST_USERS=${LOAD_TEST_USERS:-10}
      - LOAD_TEST_DURATION=${LOAD_TEST_DURATION:-60}
      - LOAD_TEST_RAMP_UP=${LOAD_TEST_RAMP_UP:-10}
      - AGENT_BUILDER_UI_URL=http://agent-builder-ui:8300
      - AGENT_ORCHESTRATOR_URL=http://agent-orchestrator:8200
      - BRAIN_FACTORY_URL=http://brain-factory:8301
      - DEPLOYMENT_PIPELINE_URL=http://deployment-pipeline:8303
      - UI_TO_BRAIN_MAPPER_URL=http://ui-to-brain-mapper:8302
      - MONITORING_SERVICE_URL=http://monitoring-metrics-service:8350
      - AUDIT_LOGGING_URL=http://audit-logging-service:8340
      - PROMETHEUS_URL=${PROMETHEUS_URL:-http://prometheus:9090}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - TEST_RESULTS_RETENTION_DAYS=${TEST_RESULTS_RETENTION_DAYS:-30}
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - e2e_testing_logs:/app/logs
      - e2e_testing_data:/app/test-data
      - e2e_testing_screenshots:/app/screenshots
    ports:
      - "${E2E_TESTING_PORT:-8380}:8380"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8380/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Automated Testing Service - Comprehensive automated testing framework
  automated-testing-service:
    build: ./services/automated-testing-service
    container_name: agentic-automated-testing-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AUTOMATED_TESTING_PORT=${AUTOMATED_TESTING_PORT:-8390}
      - HOST=0.0.0.0
      - MAX_CONCURRENT_TESTS=${MAX_CONCURRENT_TESTS:-10}
      - TEST_TIMEOUT_SECONDS=${TEST_TIMEOUT_SECONDS:-600}
      - RESULTS_RETENTION_DAYS=${RESULTS_RETENTION_DAYS:-30}
      - AGENT_ORCHESTRATOR_URL=http://agent-orchestrator:8200
      - BRAIN_FACTORY_URL=http://brain-factory:8301
      - DEPLOYMENT_PIPELINE_URL=http://deployment-pipeline:8303
      - UI_TESTING_URL=http://ui-testing-service:8310
      - INTEGRATION_TESTS_URL=http://integration-tests:8320
      - AUTHENTICATION_URL=http://authentication-service:8330
      - MONITORING_SERVICE_URL=http://monitoring-metrics-service:8350
      - AUDIT_LOGGING_URL=http://audit-logging-service:8340
      - PROMETHEUS_URL=${PROMETHEUS_URL:-http://prometheus:9090}
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - automated_testing_workspace:/app/test_workspace
      - automated_testing_results:/app/test_results
      - automated_testing_logs:/app/test_logs
    ports:
      - "${AUTOMATED_TESTING_PORT:-8390}:8390"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8390/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # UI Quality Verification Service - Comprehensive UI quality assessment
  ui-quality-verification-service:
    build: ./services/ui-quality-verification-service
    container_name: agentic-ui-quality-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - UI_QUALITY_PORT=${UI_QUALITY_PORT:-8400}
      - HOST=0.0.0.0
      - AGENT_BUILDER_UI_URL=http://agent-builder-ui:8300
      - DASHBOARD_UI_URL=http://nginx:80
      - UI_TESTING_URL=http://ui-testing-service:8310
      - MIN_COLOR_CONTRAST_RATIO=${MIN_COLOR_CONTRAST_RATIO:-4.5}
      - MIN_FONT_SIZE=${MIN_FONT_SIZE:-14}
      - MAX_LOAD_TIME_SECONDS=${MAX_LOAD_TIME_SECONDS:-3.0}
      - MIN_INTERACTION_TIME_MS=${MIN_INTERACTION_TIME_MS:-100}
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - ui_quality_screenshots:/app/screenshots
      - ui_quality_reports:/app/reports
      - ui_quality_temp:/app/temp
    ports:
      - "${UI_QUALITY_PORT:-8400}:8400"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8400/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Documentation Service - Web-based documentation portal
  documentation-service:
    build: ./services/documentation-service
    container_name: agentic-documentation-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DOCUMENTATION_PORT=${DOCUMENTATION_PORT:-8410}
      - HOST=0.0.0.0
      - DOCS_LANGUAGE=${DOCS_LANGUAGE:-en}
      - SUPPORTED_LANGUAGES=${SUPPORTED_LANGUAGES:-en,es,fr,de,zh}
      - DOCS_CACHE_TTL=${DOCS_CACHE_TTL:-3600}
      - MAX_CONTENT_SIZE=${MAX_CONTENT_SIZE:-10485760}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-true}
      - ANALYTICS_RETENTION_DAYS=${ANALYTICS_RETENTION_DAYS:-365}
      - AGENT_BUILDER_UI_URL=http://agent-builder-ui:8300
      - API_BASE_URL=http://agent-orchestrator:8200
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - docs_content:/app/docs_content
      - docs_media:/app/docs_media
    ports:
      - "${DOCUMENTATION_PORT:-8410}:8410"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8410/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Performance Optimization Service - Automated performance monitoring and optimization
  performance-optimization-service:
    build: ./services/performance-optimization-service
    container_name: agentic-performance-optimization-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PERFORMANCE_OPTIMIZATION_PORT=${PERFORMANCE_OPTIMIZATION_PORT:-8420}
      - HOST=0.0.0.0
      - MONITORING_INTERVAL=${MONITORING_INTERVAL:-30}
      - PERFORMANCE_RETENTION_DAYS=${PERFORMANCE_RETENTION_DAYS:-30}
      - ALERT_THRESHOLD_CPU=${ALERT_THRESHOLD_CPU:-80.0}
      - ALERT_THRESHOLD_MEMORY=${ALERT_THRESHOLD_MEMORY:-85.0}
      - ALERT_THRESHOLD_DISK=${ALERT_THRESHOLD_DISK:-90.0}
      - ENABLE_AUTO_OPTIMIZATION=${ENABLE_AUTO_OPTIMIZATION:-true}
      - OPTIMIZATION_CHECK_INTERVAL=${OPTIMIZATION_CHECK_INTERVAL:-300}
      - CONNECTION_POOL_SIZE=${CONNECTION_POOL_SIZE:-20}
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-3600}
      - AGENT_ORCHESTRATOR_URL=http://agent-orchestrator:8200
      - MONITORING_SERVICE_URL=http://monitoring-metrics-service:8350
      - PROMETHEUS_URL=${PROMETHEUS_URL:-http://prometheus:9090}
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    volumes:
      - performance_optimization_data:/app/performance_data
      - performance_optimization_logs:/app/optimization_logs
    ports:
      - "${PERFORMANCE_OPTIMIZATION_PORT:-8420}:8420"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8420/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Platform Validation Service - Comprehensive platform validation and production readiness assessment
  platform-validation-service:
    build: ./services/platform-validation-service
    container_name: agentic-platform-validation-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      agent-orchestrator:
        condition: service_healthy
      brain-factory:
        condition: service_healthy
      deployment-pipeline:
        condition: service_healthy
    environment:
      - PLATFORM_VALIDATION_PORT=${PLATFORM_VALIDATION_PORT:-8430}
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://user:password@postgres:5432/agentic_brain
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - VALIDATION_TIMEOUT=${VALIDATION_TIMEOUT:-300}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-60}
      - PERFORMANCE_TEST_DURATION=${PERFORMANCE_TEST_DURATION:-60}
      - AGENT_ORCHESTRATOR_URL=http://agent-orchestrator:8200
      - BRAIN_FACTORY_URL=http://brain-factory:8301
      - DEPLOYMENT_PIPELINE_URL=http://deployment-pipeline:8303
      - MONITORING_METRICS_URL=http://monitoring-metrics-service:8350
      - AUDIT_LOGGING_URL=http://audit-logging-service:8340
      - UI_TESTING_URL=http://ui-testing-service:8310
      - INTEGRATION_TESTS_URL=http://integration-tests:8320
      - AUTOMATED_TESTING_URL=http://automated-testing-service:8390
      - UI_QUALITY_URL=http://ui-quality-verification-service:8400
      - DOCUMENTATION_URL=http://documentation-service:8410
      - PERFORMANCE_OPTIMIZATION_URL=http://performance-optimization-service:8420
    volumes:
      - platform_validation_data:/app/data
      - platform_validation_logs:/app/logs
    ports:
      - "${PLATFORM_VALIDATION_PORT:-8430}:8430"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8430/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

configs:
  qdrant_config:
    file: ./docker/configs/qdrant.yaml
