networks:
  agentic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Input layer volumes
  postgres_ingestion_data:
  redis_ingestion_cache:
  rabbitmq_data:
  ingestion_data:

  # Output layer volumes
  postgres_output_data:
  qdrant_storage:
  mongodb_output_data:
  minio_bronze_data:
  minio_silver_data:
  minio_gold_data:
  kafka_output_data:
  elasticsearch_data:
  timescaledb_data:
  neo4j_data:

  # Infrastructure volumes
  grafana_data:
  prometheus_data:
  backup_storage:
  audit_logs:

  # Caching volumes
  redis_cluster_data:

services:
  # === INPUT LAYER SERVICES ===

  # Message Queue Infrastructure
  rabbitmq:
    image: rabbitmq:3-management
    container_name: agentic-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: agentic_user
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-agentic123}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Ingestion Database
  postgresql_ingestion:
    image: postgres:15
    container_name: agentic-postgres-ingestion
    environment:
      POSTGRES_DB: agentic_ingestion
      POSTGRES_USER: agentic_user
      POSTGRES_PASSWORD: ${POSTGRES_INGESTION_PASSWORD:-agentic123}
    volumes:
      - postgres_ingestion_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_INGESTION_PORT:-5432}:5432"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic_user -d agentic_ingestion"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache for Ingestion
  redis_ingestion:
    image: redis:7-alpine
    container_name: agentic-redis-ingestion
    command: redis-server --appendonly yes
    volumes:
      - redis_ingestion_cache:/data
    ports:
      - "${REDIS_INGESTION_PORT:-6379}:6379"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Ingestion Coordinator Service
  ingestion-coordinator:
    build: ./services/ingestion-coordinator
    container_name: agentic-ingestion-coordinator
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
    environment:
      - DB_HOST=postgresql_ingestion
      - DB_PORT=5432
      - DB_NAME=agentic_ingestion
      - DB_USER=agentic_user
      - DB_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - QUEUE_HOST=rabbitmq
      - QUEUE_PORT=5672
      - CACHE_HOST=redis_ingestion
      - CACHE_PORT=6379
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${INGESTION_COORDINATOR_PORT:-8080}:8080"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # CSV Ingestion Service
  csv-ingestion-service:
    build: ./ingestion-services/csv-service
    container_name: agentic-csv-ingestion
    depends_on:
      ingestion-coordinator:
        condition: service_healthy
    environment:
      - SERVICE_TYPE=csv
      - COORDINATOR_HOST=ingestion-coordinator
      - COORDINATOR_PORT=8080
      - QUEUE_HOST=rabbitmq
      - DB_HOST=postgresql_ingestion
      - CACHE_HOST=redis_ingestion
    volumes:
      - ingestion_data:/app/data
    networks:
      - agentic-network
    restart: unless-stopped

  # PDF Ingestion Service
  pdf-ingestion-service:
    build: ./ingestion-services/pdf-service
    container_name: agentic-pdf-ingestion
    depends_on:
      ingestion-coordinator:
        condition: service_healthy
    environment:
      - SERVICE_TYPE=pdf
      - OCR_ENGINE=tesseract
      - COORDINATOR_HOST=ingestion-coordinator
      - QUEUE_HOST=rabbitmq
      - DB_HOST=postgresql_ingestion
      - CACHE_HOST=redis_ingestion
    volumes:
      - ingestion_data:/app/data
    networks:
      - agentic-network
    restart: unless-stopped

  # Excel Ingestion Service - DISABLED: Missing Dockerfile (Rule 1 violation)
  # excel-ingestion-service:
  #   build: ./ingestion-services/excel-service
  #   container_name: agentic-excel-ingestion
  #   depends_on:
  #     ingestion-coordinator:
  #       condition: service_healthy
  #   environment:
  #     - SERVICE_TYPE=excel
  #     - COORDINATOR_HOST=ingestion-coordinator
  #     - QUEUE_HOST=rabbitmq
  #     - DB_HOST=postgresql_ingestion
  #     - CACHE_HOST=redis_ingestion
  #   volumes:
  #     - ingestion_data:/app/data
  #   networks:
  #     - agentic-network
  #   restart: unless-stopped

  # JSON Ingestion Service - DISABLED: Missing Dockerfile (Rule 1 violation)
  # json-ingestion-service:
  #   build: ./ingestion-services/json-service
  #   container_name: agentic-json-ingestion
  #   depends_on:
  #     ingestion-coordinator:
  #       condition: service_healthy
  #   environment:
  #     - SERVICE_TYPE=json
  #     - COORDINATOR_HOST=ingestion-coordinator
  #     - QUEUE_HOST=rabbitmq
  #     - DB_HOST=postgresql_ingestion
  #     - CACHE_HOST=redis_ingestion
  #   volumes:
  #     - ingestion_data:/app/data
  #   networks:
  #     - agentic-network
  #   restart: unless-stopped

  # API Ingestion Service - DISABLED: Missing Dockerfile (Rule 1 violation)
  # api-ingestion-service:
  #   build: ./ingestion-services/api-service
  #   container_name: agentic-api-ingestion
  #   depends_on:
  #     ingestion-coordinator:
  #       condition: service_healthy
  #   environment:
  #     - SERVICE_TYPE=api
  #     - COORDINATOR_HOST=ingestion-coordinator
  #     - QUEUE_HOST=rabbitmq
  #     - DB_HOST=postgresql_ingestion
  #     - CACHE_HOST=redis_ingestion
  #   networks:
  #     - agentic-network
  #   restart: unless-stopped

  # UI Scraper Service - DISABLED: Missing Dockerfile (Rule 1 violation)
  # ui-scraper-service:
  #   build: ./ingestion-services/ui-scraper-service
  #   container_name: agentic-ui-scraper
  #   depends_on:
  #     ingestion-coordinator:
  #     condition: service_healthy
  #   environment:
  #     - SERVICE_TYPE=ui-scraper
  #     - COORDINATOR_HOST=ingestion-coordinator
  #     - QUEUE_HOST=rabbitmq
  #     - DB_HOST=postgresql_ingestion
  #     - CACHE_HOST=redis_ingestion
  #   networks:
  #     - agentic-network
  #   restart: unless-stopped

  # === OUTPUT LAYER SERVICES ===

  # Output Database
  postgresql_output:
    image: postgres:15
    container_name: agentic-postgres-output
    environment:
      POSTGRES_DB: agentic_output
      POSTGRES_USER: agentic_user
      POSTGRES_PASSWORD: ${POSTGRES_OUTPUT_PASSWORD:-agentic123}
    volumes:
      - postgres_output_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_OUTPUT_PORT:-5433}:5432"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic_user -d agentic_output"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Vector Database - Qdrant
  qdrant_vector:
    image: qdrant/qdrant:latest
    container_name: agentic-qdrant
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Document Database - MongoDB
  mongodb_output:
    image: mongo:7
    container_name: agentic-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: agentic_user
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-agentic123}
      MONGO_INITDB_DATABASE: agentic_output
    volumes:
      - mongodb_output_data:/data/db
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Search Database - Elasticsearch
  elasticsearch_output:
    image: elasticsearch:8.11.0
    container_name: agentic-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "${ELASTICSEARCH_TCP_PORT:-9300}:9300"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Time Series Database - TimescaleDB
  timescaledb_output:
    image: timescale/timescaledb:latest-pg15
    container_name: agentic-timescaledb
    environment:
      POSTGRES_DB: agentic_timeseries
      POSTGRES_USER: agentic_user
      POSTGRES_PASSWORD: ${TIMESCALEDB_PASSWORD:-agentic123}
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    ports:
      - "${TIMESCALEDB_PORT:-5434}:5432"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic_user -d agentic_timeseries"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Graph Database - Neo4j
  neo4j_output:
    image: neo4j:5.15
    container_name: agentic-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-agentic123}
      NEO4J_PLUGINS: '["graph-data-science"]'
    volumes:
      - neo4j_data:/data
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-agentic123}", "MATCH () RETURN count(*) limit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Data Lake - MinIO Bronze Layer
  minio_bronze:
    image: minio/minio:latest
    container_name: agentic-minio-bronze
    command: server /data/bronze --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-agentic_user}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-agentic123}
    volumes:
      - minio_bronze_data:/data/bronze
    ports:
      - "${MINIO_BRONZE_API_PORT:-9000}:9000"
      - "${MINIO_BRONZE_CONSOLE_PORT:-9001}:9001"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Data Lake - MinIO Silver Layer
  minio_silver:
    image: minio/minio:latest
    container_name: agentic-minio-silver
    command: server /data/silver --console-address ":9002"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-agentic_user}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-agentic123}
    volumes:
      - minio_silver_data:/data/silver
    ports:
      - "${MINIO_SILVER_API_PORT:-9010}:9000"
      - "${MINIO_SILVER_CONSOLE_PORT:-9002}:9001"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9010/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Data Lake - MinIO Gold Layer
  minio_gold:
    image: minio/minio:latest
    container_name: agentic-minio-gold
    command: server /data/gold --console-address ":9003"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-agentic_user}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-agentic123}
    volumes:
      - minio_gold_data:/data/gold
    ports:
      - "${MINIO_GOLD_API_PORT:-9020}:9000"
      - "${MINIO_GOLD_CONSOLE_PORT:-9003}:9001"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9020/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Data Lake Service
  data-lake-minio:
    build: ./services/data-lake-minio
    container_name: agentic-data-lake
    depends_on:
      minio_bronze:
        condition: service_healthy
      minio_silver:
        condition: service_healthy
      minio_gold:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - MINIO_ENDPOINT_BRONZE=http://minio_bronze:9000
      - MINIO_ENDPOINT_SILVER=http://minio_silver:9010
      - MINIO_ENDPOINT_GOLD=http://minio_gold:9020
      - MINIO_ACCESS_KEY=${MINIO_USER:-agentic_user}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
    volumes:
      - ingestion_data:/app/data
    ports:
      - "${DATA_LAKE_PORT:-8090}:8090"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Message Queue Service
  message-queue:
    build: ./services/message-queue
    container_name: agentic-message-queue
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=agentic_user
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-agentic123}
    ports:
      - "${MESSAGE_QUEUE_PORT:-8091}:8091"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Caching Service
  redis-caching:
    build: ./services/caching-redis
    container_name: agentic-redis-caching
    depends_on:
      redis_ingestion:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
    ports:
      - "${REDIS_CACHING_PORT:-8092}:8092"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # OAuth2/OIDC Authentication Service
  oauth2-oidc:
    build: ./services/oauth2-oidc
    container_name: agentic-oauth2-oidc
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - BASE_URL=http://localhost:8093
    ports:
      - "${OAUTH2_OIDC_PORT:-8093}:8093"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Data Encryption Service
  data-encryption:
    build: ./services/data-encryption
    container_name: agentic-data-encryption
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
    ports:
      - "${DATA_ENCRYPTION_PORT:-8094}:8094"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8094/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring Service
  monitoring:
    build: ./services/monitoring
    container_name: agentic-monitoring
    depends_on:
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_API_KEY=${GRAFANA_API_KEY:-admin:admin}
    ports:
      - "${MONITORING_PORT:-8095}:8095"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Audit Compliance Service
  audit-compliance:
    build: ./services/audit-compliance
    container_name: agentic-audit-compliance
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
    ports:
      - "${AUDIT_COMPLIANCE_PORT:-8096}:8096"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backup Orchestration Service
  backup-orchestration:
    build: ./services/backup-orchestration
    container_name: agentic-backup-orchestration
    depends_on:
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - backup_storage:/backups
    ports:
      - "${BACKUP_ORCHESTRATION_PORT:-8097}:8097"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8097/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Port Manager Service
  # Distributed Tracing - Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: agentic-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-16688}:16688"
      - "${JAEGER_AGENT_PORT:-6831}:6831/udp"
    networks:
      - agentic-network
    restart: unless-stopped

  # Distributed Tracing Service
  tracing-jaeger:
    build: ./services/tracing-jaeger
    container_name: agentic-tracing-jaeger
    depends_on:
      jaeger:
        condition: service_started
      postgresql_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - JAEGER_ENDPOINT=http://jaeger:16686
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    ports:
      - "${TRACING_JAEGER_PORT:-8099}:8099"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # GraphQL API Service
  graphql-api:
    build: ./services/graphql-api
    container_name: agentic-graphql-api
    depends_on:
      data-lake-minio:
        condition: service_healthy
      postgresql_ingestion:
        condition: service_healthy
      redis_ingestion:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgresql_ingestion
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentic_ingestion
      - POSTGRES_USER=agentic_user
      - POSTGRES_PASSWORD=${POSTGRES_INGESTION_PASSWORD:-agentic123}
      - REDIS_HOST=redis_ingestion
      - REDIS_PORT=6379
    ports:
      - "${GRAPHQL_API_PORT:-8100}:8100"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Output Coordinator Service
  output-coordinator:
    build: ./services/output-coordinator
    container_name: agentic-output-coordinator
    depends_on:
      postgresql_output:
        condition: service_healthy
      qdrant_vector:
        condition: service_healthy
      mongodb_output:
        condition: service_healthy
    environment:
      - OUTPUT_DB_HOST=postgresql_output
      - OUTPUT_DB_PORT=5432
      - VECTOR_DB_HOST=qdrant_vector
      - VECTOR_DB_PORT=6333
      - DOCUMENT_DB_HOST=mongodb_output
      - DOCUMENT_DB_PORT=27017
      - SEARCH_DB_HOST=elasticsearch_output
      - SEARCH_DB_PORT=9200
      - TIMESERIES_DB_HOST=timescaledb_output
      - GRAPH_DB_HOST=neo4j_output
      - MINIO_ENDPOINT=http://minio_bronze:9000
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    ports:
      - "${OUTPUT_COORDINATOR_PORT:-8081}:8081"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # === MONITORING & OBSERVABILITY ===

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - agentic-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - agentic-network
    restart: unless-stopped

  # Log Aggregation - FluentD
  fluentd:
    image: fluent/fluentd:latest
    container_name: agentic-fluentd
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf
      - audit_logs:/fluentd/log
    ports:
      - "${FLUENTD_PORT:-24224}:24224"
    networks:
      - agentic-network
    restart: unless-stopped

  # === SECURITY & AUTHENTICATION ===

  # OAuth2 Proxy
  oauth2_proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: agentic-oauth2-proxy
    environment:
      - OAUTH2_PROXY_PROVIDER=oidc
      - OAUTH2_PROXY_CLIENT_ID=${OAUTH_CLIENT_ID:-dummy}
      - OAUTH2_PROXY_CLIENT_SECRET=${OAUTH_CLIENT_SECRET:-dummy}
      - OAUTH2_PROXY_OIDC_ISSUER_URL=${OIDC_ISSUER_URL:-http://dummy}
      - OAUTH2_PROXY_HTTP_ADDRESS=0.0.0.0:4180
      - OAUTH2_PROXY_UPSTREAMS=http://ingestion-coordinator:8080,http://output-coordinator:8081
    ports:
      - "${OAUTH2_PROXY_PORT:-4180}:4180"
    networks:
      - agentic-network
    profiles:
      - auth
    restart: unless-stopped

  # === STREAMING & MESSAGING ===

  # Kafka for Streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: agentic-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_output_data:/var/lib/kafka/data
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    networks:
      - agentic-network
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: agentic-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - agentic-network
    restart: unless-stopped

  # === BACKUP & DISASTER RECOVERY ===

  # Backup Orchestrator - DISABLED: Missing Dockerfile (Rule 1 violation)
  # backup_orchestrator:
  #   build: ./scripts/backup
  #   container_name: agentic-backup-orchestrator
  #   environment:
  #     - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-"0 2 * * *"}
  #     - RETENTION_POLICY=${RETENTION_POLICY:-30d}
  #     - POSTGRES_HOST=postgresql_output
  #     - QDRANT_HOST=qdrant_vector
  #     - MONGODB_HOST=mongodb_output
  #   volumes:
  #     - backup_storage:/backup/output
  #   networks:
  #     - agentic-network
  #   restart: unless-stopped

  # === DEVELOPMENT & TESTING ===

  # Port Conflict Resolver - REMOVED: Duplicate service, using port-manager instead

  # Vector UI Service - Professional Web Interface
  vector-ui:
    build: ./services/vector-ui
    container_name: agentic-vector-ui
    depends_on:
      output-coordinator:
        condition: service_healthy
    environment:
      - VECTOR_UI_PORT=${VECTOR_UI_PORT:-8082}
      - OUTPUT_COORDINATOR_URL=http://output-coordinator:8081
      - REQUIRE_AUTH=${REQUIRE_AUTH:-false}
    ports:
      - "${VECTOR_UI_PORT:-8082}:8082"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Port Manager Service - Automatic Port Conflict Resolution
  port-manager:
    build: ./services/port-manager
    container_name: agentic-port-manager
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PYTHONPATH=/app
    networks:
      - agentic-network
    profiles:
      - dev
    restart: "no"

configs:
  qdrant_config:
    file: ./docker/configs/qdrant.yaml
